{"mappings":"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","sources":["index.ts","mdx-mermaid.ts","render-diagram.ts"],"sourcesContent":["import mdxMermaidPlugin from './mdx-mermaid';\n\nexport default mdxMermaidPlugin;\n","/**\n * WIP\n *\n * Some bits of code are from https://github.com/sjwall/mdx-mermaid\n *\n * Using Parcel to bundle this plugin because\n * Astro uses MJS for its config file.\n * (It seems that it support TS too, but it breaks some third-parties)\n *\n * Also, this could be a separate remark plugin?\n */\n\n// TODO: Proper TypeScript rehaul for this file.\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { visit } from 'unist-util-visit';\nimport renderDiagram from './render-diagram';\n\nconst style = `display: flex; justify-content: center; width: 100%;`;\n\nfunction plugin() {\n  return async function transformer(ast) {\n    // Find all the mermaid diagram code blocks. i.e. ```mermaid\n    const instances = [];\n    visit(ast, { type: 'code', lang: 'mermaid' }, (node, index, parent) => {\n      instances.push([node, index, parent]);\n    });\n    // Replace each Mermaid code block with the server-side rendered SVG\n    await Promise.all(\n      instances.map(async ([node, index, parent]) => {\n        // MDX rendering seems to be already cached.\n        // or this keep running puppeeter ?\n        // Also, disabling it prevent a bug which doesn't\n        // occur in the regular component.\n        const html = await renderDiagram({\n          config: { theme: 'forest' },\n          code: node.value,\n        }).then((diagram) => diagram);\n\n        parent.children.splice(index, 1, {\n          type: 'html',\n          // TODO: put CSS elsewhere\n          value: `<div style=\"${style}\">${html}</div>`,\n          position: node.position,\n        });\n      }),\n    );\n\n    return ast;\n  };\n}\n\nexport default plugin;\n","import path from 'node:path';\nimport fs from 'node:fs/promises';\n// import { createRequire } from 'module';\nimport puppeteer from 'puppeteer';\n/* ·········································································· */\nimport type { Props } from './Props';\n\n/* —————————————————————————————————————————————————————————————————————————— */\n\n// FIXME: prefer this method over `fs.readFile`.\n// Parceled MDX plugin wasn't working well with this ——v\n// const require = createRequire(import.meta.url);\n// const path = require.resolve('mermaid/dist/mermaid.js');\n\nexport default async function renderDiagram({ config, code }: Props) {\n  const browser = await puppeteer.launch({ args: ['--no-sandbox'] });\n  const page = await browser.newPage();\n\n  const content = await fs.readFile(\n    path.join(process.cwd(), 'node_modules/mermaid/dist/mermaid.js'),\n    'utf8',\n  );\n\n  await page.addScriptTag({ content });\n\n  const result: {\n    status: string;\n    error?: Error;\n    message?: string;\n    svgCode?: string;\n  } = await page.evaluate(\n    (configB, codeB: string) => {\n      // FIXME: `window.mermaid` global browser stubbing\n      window.mermaid.initialize(configB);\n\n      try {\n        /* Render the mermaid diagram */\n        const svgCode = window.mermaid.mermaidAPI.render('diagram', codeB);\n        return { status: 'success', svgCode };\n      } catch (error) {\n        return { status: 'error', error, message: error.message };\n      }\n    },\n    config,\n    code,\n  );\n\n  await browser.close();\n\n  if (result.status === 'success' && typeof result.svgCode === 'string') {\n    return result.svgCode;\n  }\n\n  return false;\n}\n"],"names":[],"version":3,"file":"index.js.map"}